---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys  Service API infrastructure in ECS Cluster
Parameters:
  InfraStackName:
    Type: String
  DockerImage:
    Type: String
  Environment:
    Type: String
  LogRetentionDays:
    Type: String
  ScalingTargetCPU:
    Type: String
  DesiredTaskCount:
    Type: String
  MinTaskCount:
    Type: String
  MaxTaskCount:
    Type: String
  AppVersion:
    Type: String
  AppCommit:
    Type: String    

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties: 
      ClusterName: !Join [ "", [ !Ref Environment, "ECSCluster" ] ]

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: 
        Fn::ImportValue: !Sub "${InfraStackName}-ECSTaskExecutionRoleArn"
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${InfraStackName}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: App
          Image: !Ref DockerImage
          Essential: true
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "Service-${Environment}-ecs"
         Environment:
          - Name: APP_VERSION
            Value: !Ref AppVersion
          - Name: APP_COMMIT
            Value: !Ref AppCommit            
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: api

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Join
        - /
        - - !Sub 'arn:aws:ecs:ap-southeast-2:${AWS::AccountId}:cluster'
          - !Ref ECSCluster
      DesiredCount: !Ref DesiredTaskCount
      DeploymentController:
        Type: ECS
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: App
          ContainerPort: 8080
          TargetGroupArn: 
            Fn::ImportValue: !Sub "${InfraStackName}-ALBTargetGroup"
      PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${InfraStackName}-ApiEcsSecurityGroup"
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue: !Sub "${InfraStackName}-PrivateSubnets"

  ECSScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: !Ref MaxTaskCount
        MinCapacity: !Ref MinTaskCount
        RoleARN: 
          Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
        ServiceNamespace: ecs
        ScalableDimension: 'ecs:service:DesiredCount'
        ResourceId: !Join 
          - /
          - - service
            - !Ref ECSCluster
            - !GetAtt ECSService.Name
    
  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref ScalingTargetCPU
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ManageLogGroupsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles: 
        - Fn::ImportValue: !Sub "${InfraStackName}-ECSTaskExecutionRole"
      PolicyName: !Sub "${Environment}-ManageLogGroups"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DescribeLogStreams"
            Resource: !GetAtt 
              - CloudwatchLogsGroup
              - Arn

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-ecs-logs"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !GetAtt ECSService.Name